/**
 * Admin Panel JavaScript
 * –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é
 */

import { DataManager } from './managers/dataManager.js';
import { Utils } from './utils.js';

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class AdminAuth {
    constructor() {
        this.adminCredentials = {
            username: 'admin',
            password: 'admin123',
            email: 'admin@gamehub.com'
        };
        this.sessionKey = 'adminSession';
        this.initializeCredentials();
    }

    initializeCredentials() {
        const stored = localStorage.getItem('adminCredentials');
        if (!stored) {
            localStorage.setItem('adminCredentials', JSON.stringify(this.adminCredentials));
        } else {
            this.adminCredentials = JSON.parse(stored);
        }
    }

    authenticate(username, password) {
        if (username === this.adminCredentials.username && 
            password === this.adminCredentials.password) {
            const session = {
                isAuthenticated: true,
                username: this.adminCredentials.username,
                email: this.adminCredentials.email,
                loginTime: new Date().toISOString()
            };
            localStorage.setItem(this.sessionKey, JSON.stringify(session));
            return true;
        }
        return false;
    }

    isAuthenticated() {
        const session = Utils.safeGetItem(this.sessionKey);
        if (!session) return false;
        
        try {
            return session.isAuthenticated === true;
        } catch (error) {
            return false;
        }
    }

    logout() {
        localStorage.removeItem(this.sessionKey);
        window.location.href = 'admin-login.html';
    }

    getSession() {
        return Utils.safeGetItem(this.sessionKey);
    }
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
class ModalManager {
    constructor() {
        this.overlay = Utils.getElement('modal-overlay');
        this.modal = this.overlay.querySelector('.modal');
        this.title = Utils.getElement('modal-title');
        this.body = Utils.getElement('modal-body');
        this.closeBtn = Utils.getElement('modal-close');
        
        this.setupEventListeners();
    }

    setupEventListeners() {
        Utils.addEventListenerSafe(this.closeBtn, 'click', () => this.close());
        Utils.addEventListenerSafe(this.overlay, 'click', (e) => {
            if (e.target === this.overlay) this.close();
        });
    }

    open(title, content) {
        this.title.textContent = title;
        this.body.innerHTML = content;
        this.overlay.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    close() {
        this.overlay.classList.remove('active');
        document.body.style.overflow = '';
        this.body.innerHTML = '';
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
class AdminPanel {
    constructor() {
        this.auth = new AdminAuth();
        this.modal = new ModalManager();
        this.data = window.gameHubDataManager || new DataManager();
        this.currentTab = 'dashboard';
        
        this.init();
    }

    init() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (!this.auth.isAuthenticated()) {
            window.location.href = 'admin-login.html';
            return;
        }

        this.setupEventListeners();
        this.loadDashboard();
        this.updateAdminInfo();
    }

    setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        const navButtons = document.querySelectorAll('.nav-btn');
        navButtons.forEach(btn => {
            Utils.addEventListenerSafe(btn, 'click', (e) => {
                const tab = e.currentTarget.dataset.tab;
                this.switchTab(tab);
            });
        });

        // –í—ã—Ö–æ–¥
        Utils.addEventListenerSafe(Utils.getElement('admin-logout'), 'click', () => {
            this.auth.logout();
        });

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        Utils.addEventListenerSafe(Utils.getElement('user-search'), 'input', () => {
            this.filterUsers();
        });

        Utils.addEventListenerSafe(Utils.getElement('user-filter'), 'change', () => {
            this.filterUsers();
        });

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        Utils.addEventListenerSafe(Utils.getElement('add-game-btn'), 'click', () => {
            this.showAddGameModal();
        });

        Utils.addEventListenerSafe(Utils.getElement('add-news-btn'), 'click', () => {
            this.showAddNewsModal();
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        Utils.addEventListenerSafe(Utils.getElement('save-admin-settings'), 'click', () => {
            this.saveAdminSettings();
        });

        Utils.addEventListenerSafe(Utils.getElement('save-site-settings'), 'click', () => {
            this.saveSiteSettings();
        });
    }

    switchTab(tabName) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });
        Utils.getElement(tabName).classList.add('active');

        this.currentTab = tabName;
        this.loadTabContent(tabName);
    }

    loadTabContent(tabName) {
        switch (tabName) {
            case 'dashboard':
                this.loadDashboard();
                break;
            case 'users':
                this.loadUsers();
                break;
            case 'games':
                this.loadGames();
                break;
            case 'news':
                this.loadNews();
                break;
            case 'support':
                this.loadSupport();
                break;
            case 'settings':
                this.loadSettings();
                break;
        }
    }

    loadDashboard() {
        const stats = this.data.getStats();
        
        Utils.getElement('total-users').textContent = stats.totalUsers;
        Utils.getElement('total-games').textContent = stats.totalGames;
        Utils.getElement('total-news').textContent = stats.totalNews;
        Utils.getElement('support-tickets').textContent = stats.openTickets + stats.resolvedTickets;

        this.loadRecentActivity();
    }

    loadRecentActivity() {
        const activityList = Utils.getElement('activity-list');
        const activities = [];

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        const recentUsers = this.data.getUsers().slice(-3);
        recentUsers.forEach(user => {
            activities.push({
                type: 'user',
                title: `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username}`,
                time: user.createdAt || new Date().toISOString()
            });
        });

        const recentNews = this.data.getNews().slice(-3);
        recentNews.forEach(news => {
            activities.push({
                type: 'news',
                title: `–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å: ${news.title}`,
                time: news.createdAt
            });
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        activities.sort((a, b) => new Date(b.time) - new Date(a.time));

        activityList.innerHTML = activities.slice(0, 10).map(activity => `
            <div class="activity-item">
                <div class="activity-icon">${activity.type === 'user' ? 'üë§' : 'üì∞'}</div>
                <div class="activity-content">
                    <div class="activity-title">${activity.title}</div>
                    <div class="activity-time">${Utils.formatDate(activity.time)}</div>
                </div>
            </div>
        `).join('');
    }

    loadUsers() {
        const users = this.data.getUsers();
        const tbody = Utils.getElement('users-table-body');
        
        tbody.innerHTML = users.map(user => `
            <tr>
                <td>${user.id}</td>
                <td>${user.username}</td>
                <td>${user.email}</td>
                <td>${Utils.formatDate(user.createdAt)}</td>
                <td>
                    <span class="status-${user.status || 'active'}">
                        ${user.status === 'blocked' ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '–ê–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                </td>
                <td>
                    <button class="btn btn-secondary btn-sm" onclick="adminPanel.viewUser('${user.id}')">
                        –ü—Ä–æ—Å–º–æ—Ç—Ä
                    </button>
                    ${user.status === 'blocked' ? 
                        `<button class="btn btn-success btn-sm" onclick="adminPanel.unblockUser('${user.id}')">
                            –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                        </button>` :
                        `<button class="btn btn-warning btn-sm" onclick="adminPanel.blockUser('${user.id}')">
                            –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                        </button>`
                    }
                    <button class="btn btn-danger btn-sm" onclick="adminPanel.deleteUser('${user.id}')">
                        –£–¥–∞–ª–∏—Ç—å
                    </button>
                </td>
            </tr>
        `).join('');
    }

    filterUsers() {
        const searchTerm = Utils.getElement('user-search').value.toLowerCase();
        const filterValue = Utils.getElement('user-filter').value;
        const users = this.data.getUsers();
        
        const filteredUsers = users.filter(user => {
            const matchesSearch = user.username.toLowerCase().includes(searchTerm) ||
                                user.email.toLowerCase().includes(searchTerm);
            const matchesFilter = filterValue === 'all' || user.status === filterValue;
            return matchesSearch && matchesFilter;
        });
        
        const tbody = Utils.getElement('users-table-body');
        tbody.innerHTML = filteredUsers.map(user => `
            <tr>
                <td>${user.id}</td>
                <td>${user.username}</td>
                <td>${user.email}</td>
                <td>${Utils.formatDate(user.createdAt)}</td>
                <td>
                    <span class="status-${user.status || 'active'}">
                        ${user.status === 'blocked' ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '–ê–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                </td>
                <td>
                    <button class="btn btn-secondary btn-sm" onclick="adminPanel.viewUser('${user.id}')">
                        –ü—Ä–æ—Å–º–æ—Ç—Ä
                    </button>
                    ${user.status === 'blocked' ? 
                        `<button class="btn btn-success btn-sm" onclick="adminPanel.unblockUser('${user.id}')">
                            –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                        </button>` :
                        `<button class="btn btn-warning btn-sm" onclick="adminPanel.blockUser('${user.id}')">
                            –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                        </button>`
                    }
                    <button class="btn btn-danger btn-sm" onclick="adminPanel.deleteUser('${user.id}')">
                        –£–¥–∞–ª–∏—Ç—å
                    </button>
                </td>
            </tr>
        `).join('');
    }

    loadGames() {
        const games = this.data.getGames();
        const tbody = Utils.getElement('games-table-body');
        
        tbody.innerHTML = games.map(game => `
            <tr>
                <td>${game.id}</td>
                <td>${game.title}</td>
                <td>${game.description}</td>
                <td>${Utils.formatDate(game.createdAt)}</td>
                <td>
                    <button class="btn btn-secondary btn-sm" onclick="adminPanel.editGame('${game.id}')">
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-danger btn-sm" onclick="adminPanel.deleteGame('${game.id}')">
                        –£–¥–∞–ª–∏—Ç—å
                    </button>
                </td>
            </tr>
        `).join('');
    }

    loadNews() {
        const news = this.data.getNews();
        const tbody = Utils.getElement('news-table-body');
        
        tbody.innerHTML = news.map(item => `
            <tr>
                <td>${item.id}</td>
                <td>${item.title}</td>
                <td>${item.content.substring(0, 100)}...</td>
                <td>${Utils.formatDate(item.createdAt)}</td>
                <td>
                    <button class="btn btn-secondary btn-sm" onclick="adminPanel.editNews('${item.id}')">
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-danger btn-sm" onclick="adminPanel.deleteNews('${item.id}')">
                        –£–¥–∞–ª–∏—Ç—å
                    </button>
                </td>
            </tr>
        `).join('');
    }

    loadSupport() {
        const tickets = this.data.getSupportTickets();
        const tbody = Utils.getElement('support-table-body');
        
        tbody.innerHTML = tickets.map(ticket => `
            <tr>
                <td>${ticket.id}</td>
                <td>${ticket.subject}</td>
                <td>${ticket.message.substring(0, 100)}...</td>
                <td>${Utils.formatDate(ticket.createdAt)}</td>
                <td>
                    <span class="status-${ticket.status}">
                        ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : '–†–µ—à–µ–Ω'}
                    </span>
                </td>
                <td>
                    <button class="btn btn-secondary btn-sm" onclick="adminPanel.respondToTicket('${ticket.id}')">
                        –û—Ç–≤–µ—Ç–∏—Ç—å
                    </button>
                    ${ticket.status === 'open' ? 
                        `<button class="btn btn-success btn-sm" onclick="adminPanel.resolveTicket('${ticket.id}')">
                            –†–µ—à–∏—Ç—å
                        </button>` : ''
                    }
                </td>
            </tr>
        `).join('');
    }

    loadSettings() {
        const session = this.auth.getSession();
        if (session) {
            Utils.getElement('admin-username-input').value = session.username || '';
            Utils.getElement('admin-email-input').value = session.email || '';
        }

        const siteSettings = Utils.safeGetItem('siteSettings', {});
        Utils.getElement('site-name-input').value = siteSettings.siteName || 'GameHub';
        Utils.getElement('site-description-input').value = siteSettings.siteDescription || '';
    }

    updateAdminInfo() {
        const session = this.auth.getSession();
        if (session) {
            Utils.getElement('admin-username').textContent = Utils.escapeHtml(session.username);
            Utils.getElement('admin-email').textContent = Utils.escapeHtml(session.email);
            Utils.getElement('admin-login-time').textContent = Utils.formatDate(session.loginTime);
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    viewUser(userId) {
        const user = this.data.getUserById(userId);
        if (!user) {
            this.showToast('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        const content = `
            <div class="user-details">
                <p><strong>ID:</strong> ${user.id}</p>
                <p><strong>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> ${user.username}</p>
                <p><strong>Email:</strong> ${user.email}</p>
                <p><strong>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</strong> ${Utils.formatDate(user.createdAt)}</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${user.status === 'blocked' ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '–ê–∫—Ç–∏–≤–µ–Ω'}</p>
            </div>
        `;

        this.modal.open('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', content);
    }

    blockUser(userId) {
        if (this.data.updateUser(userId, { status: 'blocked' })) {
            this.showToast('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'success');
            this.loadUsers();
        } else {
            this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        }
    }

    unblockUser(userId) {
        if (this.data.updateUser(userId, { status: 'active' })) {
            this.showToast('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'success');
            this.loadUsers();
        } else {
            this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        }
    }

    deleteUser(userId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
            if (this.data.deleteUser(userId)) {
                this.showToast('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω', 'success');
                this.loadUsers();
                this.loadDashboard();
            } else {
                this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
            }
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–∞–º–∏
    showAddGameModal() {
        const content = `
            <form id="add-game-form">
                <div class="setting-item">
                    <label for="game-title">–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:</label>
                    <input type="text" id="game-title" class="form-input" required>
                </div>
                <div class="setting-item">
                    <label for="game-description">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                    <textarea id="game-description" class="form-textarea" required></textarea>
                </div>
                <div class="setting-item">
                    <label for="game-image">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</label>
                    <input type="url" id="game-image" class="form-input" required>
                </div>
                <div class="setting-item">
                    <label for="game-url">URL –∏–≥—Ä—ã:</label>
                    <input type="url" id="game-url" class="form-input" required>
                </div>
                <button type="submit" class="btn btn-primary">–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É</button>
            </form>
        `;

        this.modal.open('–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É', content);
        
        Utils.addEventListenerSafe(Utils.getElement('add-game-form'), 'submit', (e) => {
            e.preventDefault();
            this.addGame();
        });
    }

    addGame() {
        const title = Utils.getElement('game-title').value;
        const description = Utils.getElement('game-description').value;
        const image = Utils.getElement('game-image').value;
        const url = Utils.getElement('game-url').value;

        const game = { title, description, image, url };
        this.data.addGame(game);
        
        this.showToast('–ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
        this.modal.close();
        this.loadGames();
        this.loadDashboard();
    }

    editGame(gameId) {
        const game = this.data.getGameById(gameId);
        if (!game) {
            this.showToast('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
            return;
        }

        const content = `
            <form id="edit-game-form">
                <div class="setting-item">
                    <label for="edit-game-title">–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:</label>
                    <input type="text" id="edit-game-title" class="form-input" value="${game.title}" required>
                </div>
                <div class="setting-item">
                    <label for="edit-game-description">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                    <textarea id="edit-game-description" class="form-textarea" required>${game.description}</textarea>
                </div>
                <div class="setting-item">
                    <label for="edit-game-image">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</label>
                    <input type="url" id="edit-game-image" class="form-input" value="${game.image}" required>
                </div>
                <div class="setting-item">
                    <label for="edit-game-url">URL –∏–≥—Ä—ã:</label>
                    <input type="url" id="edit-game-url" class="form-input" value="${game.url}" required>
                </div>
                <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
            </form>
        `;

        this.modal.open('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É', content);
        
        Utils.addEventListenerSafe(Utils.getElement('edit-game-form'), 'submit', (e) => {
            e.preventDefault();
            this.updateGame(gameId);
        });
    }

    updateGame(gameId) {
        const title = Utils.getElement('edit-game-title').value;
        const description = Utils.getElement('edit-game-description').value;
        const image = Utils.getElement('edit-game-image').value;
        const url = Utils.getElement('edit-game-url').value;

        const updates = { title, description, image, url };
        if (this.data.updateGame(gameId, updates)) {
            this.showToast('–ò–≥—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
            this.modal.close();
            this.loadGames();
        } else {
            this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã', 'error');
        }
    }

    deleteGame(gameId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É?')) {
            if (this.data.deleteGame(gameId)) {
                this.showToast('–ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
                this.loadGames();
                this.loadDashboard();
            } else {
                this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã', 'error');
            }
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
    showAddNewsModal() {
        const content = `
            <form id="add-news-form">
                <div class="setting-item">
                    <label for="news-title">–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                    <input type="text" id="news-title" class="form-input" required>
                </div>
                <div class="setting-item">
                    <label for="news-content">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</label>
                    <textarea id="news-content" class="form-textarea" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å</button>
            </form>
        `;

        this.modal.open('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å', content);
        
        Utils.addEventListenerSafe(Utils.getElement('add-news-form'), 'submit', (e) => {
            e.preventDefault();
            this.addNews();
        });
    }

    addNews() {
        const title = Utils.getElement('news-title').value;
        const content = Utils.getElement('news-content').value;

        const newsItem = { title, content };
        this.data.addNews(newsItem);
        
        this.showToast('–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
        this.modal.close();
        this.loadNews();
        this.loadDashboard();
    }

    editNews(newsId) {
        const news = this.data.getNewsById(newsId);
        if (!news) {
            this.showToast('–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
            return;
        }

        const content = `
            <form id="edit-news-form">
                <div class="setting-item">
                    <label for="edit-news-title">–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                    <input type="text" id="edit-news-title" class="form-input" value="${news.title}" required>
                </div>
                <div class="setting-item">
                    <label for="edit-news-content">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</label>
                    <textarea id="edit-news-content" class="form-textarea" required>${news.content}</textarea>
                </div>
                <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
            </form>
        `;

        this.modal.open('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å', content);
        
        Utils.addEventListenerSafe(Utils.getElement('edit-news-form'), 'submit', (e) => {
            e.preventDefault();
            this.updateNews(newsId);
        });
    }

    updateNews(newsId) {
        const title = Utils.getElement('edit-news-title').value;
        const content = Utils.getElement('edit-news-content').value;

        const updates = { title, content };
        if (this.data.updateNews(newsId, updates)) {
            this.showToast('–ù–æ–≤–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
            this.modal.close();
            this.loadNews();
        } else {
            this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏', 'error');
        }
    }

    deleteNews(newsId) {
        console.log('üóëÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å ID:', newsId);
        
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?')) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ');
            
            if (this.data.deleteNews(newsId)) {
                this.showToast('–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞', 'success');
                this.loadNews();
                this.loadDashboard();
                console.log('‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
            } else {
                this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏', 'error');
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
            }
        } else {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ');
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    respondToTicket(ticketId) {
        const content = `
            <form id="respond-ticket-form">
                <div class="setting-item">
                    <label for="ticket-response">–í–∞—à –æ—Ç–≤–µ—Ç:</label>
                    <textarea id="ticket-response" class="form-textarea" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç</button>
            </form>
        `;

        this.modal.open('–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç', content);
        
        Utils.addEventListenerSafe(Utils.getElement('respond-ticket-form'), 'submit', (e) => {
            e.preventDefault();
            this.sendTicketResponse(ticketId);
        });
    }

    sendTicketResponse(ticketId) {
        const response = Utils.getElement('ticket-response').value;
        
        if (this.data.addSupportResponse(ticketId, response)) {
            this.showToast('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'success');
            this.modal.close();
            this.loadSupport();
        } else {
            this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞', 'error');
        }
    }

    resolveTicket(ticketId) {
        if (this.data.updateTicketStatus(ticketId, 'resolved')) {
            this.showToast('–¢–∏–∫–µ—Ç —Ä–µ—à–µ–Ω', 'success');
            this.loadSupport();
        } else {
            this.showToast('–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    saveAdminSettings() {
        const username = Utils.getElement('admin-username-input').value;
        const email = Utils.getElement('admin-email-input').value;

        if (username && email) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            const session = this.auth.getSession();
            if (session) {
                session.username = username;
                session.email = email;
                localStorage.setItem('adminSession', JSON.stringify(session));
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.auth.adminCredentials.username = username;
            this.auth.adminCredentials.email = email;
            localStorage.setItem('adminCredentials', JSON.stringify(this.auth.adminCredentials));

            this.updateAdminInfo();
            this.showToast('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        } else {
            this.showToast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        }
    }

    saveSiteSettings() {
        const siteName = Utils.getElement('site-name-input').value;
        const siteDescription = Utils.getElement('site-description-input').value;

        if (siteName) {
            Utils.safeSetItem('siteSettings', { siteName, siteDescription });
            this.showToast('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        } else {
            this.showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞', 'error');
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showToast(message, type = 'info') {
        if (window.toastManager) {
            window.toastManager.show(type, message);
        } else {
            alert(`${type.toUpperCase()}: ${message}`);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
let adminPanel;

document.addEventListener('DOMContentLoaded', () => {
    adminPanel = new AdminPanel();
    
    // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è onclick –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    window.adminPanel = adminPanel;
});